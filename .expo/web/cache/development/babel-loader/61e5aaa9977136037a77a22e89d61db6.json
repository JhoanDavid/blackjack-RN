{"ast":null,"code":"export function shuffle(cardsDeck) {\n  for (var i = cardsDeck.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [cardsDeck[j], cardsDeck[i]];\n    cardsDeck[i] = _ref[0];\n    cardsDeck[j] = _ref[1];\n  }\n\n  return cardsDeck;\n}\nexport function calculatePoints(playerHand) {\n  var aceAdjuts = false,\n      points = 0;\n  playerHand.map(function (card, _index) {\n    if (card.name == 'A' && !aceAdjuts) {\n      aceAdjuts = true;\n      points = points + 10;\n    }\n\n    points = points + card.value;\n  });\n\n  if (aceAdjuts && points > 21) {\n    points = points - 10;\n  }\n\n  return points;\n}","map":{"version":3,"sources":["C:/Users/jhoan/Documents/Uniajc/blackjack-RN/helpers/index.js"],"names":["shuffle","cardsDeck","i","length","j","Math","floor","random","calculatePoints","playerHand","aceAdjuts","points","map","card","_index","name","value"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,SAAjB,EAA2B;AAC9B,OAAK,IAAIC,CAAC,GAAGD,SAAS,CAACE,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,GAAG,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;AAC3C,QAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AAD2C,eAEZ,CAACD,SAAS,CAACG,CAAD,CAAV,EAAeH,SAAS,CAACC,CAAD,CAAxB,CAFY;AAE1CD,IAAAA,SAAS,CAACC,CAAD,CAFiC;AAE5BD,IAAAA,SAAS,CAACG,CAAD,CAFmB;AAG9C;;AACD,SAAOH,SAAP;AACH;AAED,OAAO,SAASO,eAAT,CAAyBC,UAAzB,EAAoC;AACvC,MAAIC,SAAS,GAAG,KAAhB;AAAA,MACAC,MAAM,GAAG,CADT;AAGAF,EAAAA,UAAU,CAACG,GAAX,CAAe,UAACC,IAAD,EAAMC,MAAN,EAAiB;AAC9B,QAAGD,IAAI,CAACE,IAAL,IAAa,GAAb,IAAoB,CAACL,SAAxB,EAAmC;AACjCA,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;AACD;;AACDA,IAAAA,MAAM,GAAGA,MAAM,GAAGE,IAAI,CAACG,KAAvB;AACD,GAND;;AAQA,MAAGN,SAAS,IAAIC,MAAM,GAAG,EAAzB,EAA4B;AAC1BA,IAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;AACD;;AACD,SAAOA,MAAP;AACH","sourcesContent":["export function shuffle(cardsDeck){\n    for (let i = cardsDeck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [cardsDeck[i], cardsDeck[j]] = [cardsDeck[j], cardsDeck[i]];\n    }\n    return cardsDeck;\n}\n\nexport function calculatePoints(playerHand){\n    let aceAdjuts = false,\n    points = 0;\n\n    playerHand.map((card,_index) => {\n      if(card.name == 'A' && !aceAdjuts) {\n        aceAdjuts = true;\n        points = points + 10;\n      }\n      points = points + card.value;\n    });\n\n    if(aceAdjuts && points > 21){\n      points = points - 10;\n    }\n    return points;\n}"]},"metadata":{},"sourceType":"module"}