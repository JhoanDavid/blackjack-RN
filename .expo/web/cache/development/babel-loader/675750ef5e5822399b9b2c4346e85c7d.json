{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\jhoan\\\\Documents\\\\Uniajc\\\\blackjack-RN\\\\components\\\\example.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { connect } from 'react-redux';\nimport { fetchData as _fetchData } from \"../actions/index\";\n\nvar ShowListComponent = function (_Component) {\n  _inherits(ShowListComponent, _Component);\n\n  var _super = _createSuper(ShowListComponent);\n\n  function ShowListComponent() {\n    var _this;\n\n    _classCallCheck(this, ShowListComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.updateStore = function () {\n      _this.props.fetchData();\n    };\n\n    return _this;\n  }\n\n  _createClass(ShowListComponent, [{\n    key: \"getTvShows\",\n    value: function getTvShows() {\n      var _this2 = this;\n\n      var dataTvMaze = this.props.dataTvMaze;\n\n      if (dataTvMaze) {\n        return dataTvMaze.data.map(function (tv, index) {\n          return React.createElement(View, {\n            key: index,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 25\n            }\n          }, React.createElement(Text, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 29\n            }\n          }, tv.show.name));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, React.createElement(\"button\", {\n        onClick: this.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, \"traer\"), React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }\n      }, this.props.dataTvMaze.isFeching && React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 57\n        }\n      }, \"Loading\"), this.props.dataTvMaze.data.length ? this.getTvShows() : null));\n    }\n  }]);\n\n  return ShowListComponent;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataTvMaze: state.data\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData() {\n      return dispatch(_fetchData());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowListComponent);","map":{"version":3,"sources":["C:/Users/jhoan/Documents/Uniajc/blackjack-RN/components/example.js"],"names":["React","Component","connect","fetchData","ShowListComponent","updateStore","props","dataTvMaze","data","map","tv","index","show","name","isFeching","length","getTvShows","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAS,IAATA,UAAT;;IAEMC,iB;;;;;;;;;;;;;;;;UAIFC,W,GAAY,YAAI;AACZ,YAAKC,KAAL,CAAWH,SAAX;AACH,K;;;;;;;WAED,sBAAa;AAAA;;AACT,UAAQI,UAAR,GAAuB,KAAKD,KAA5B,CAAQC,UAAR;;AACA,UAAIA,UAAJ,EAAgB;AACZ,eAAOA,UAAU,CAACC,IAAX,CAAgBC,GAAhB,CAAoB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAClC,iBACI,oBAAC,IAAD;AAAM,YAAA,GAAG,EAAEA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOD,EAAE,CAACE,IAAH,CAAQC,IAAf,CADJ,CADJ;AAKH,SANE,CAAP;AAOH;AACJ;;;WAED,kBAAS;AACL,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,OAAO,EAAE,KAAKR,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKC,KAAL,CAAWC,UAAX,CAAsBO,SAAtB,IAAmC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADxC,EAEK,KAAKR,KAAL,CAAWC,UAAX,CAAsBC,IAAtB,CAA2BO,MAA3B,GAAmC,KAAKC,UAAL,EAAnC,GAAsD,IAF3D,CAFJ,CADJ;AASH;;;;EA/B2Bf,S;;AAkChC,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHX,IAAAA,UAAU,EAAEW,KAAK,CAACV;AADf,GAAP;AAGH,CAJD;;AAMA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAO;AACHjB,IAAAA,SAAS,EAAE,qBAAM;AACb,aAAOiB,QAAQ,CAACjB,UAAS,EAAV,CAAf;AACH;AAHE,GAAP;AAKH,CAND;;AAQA,eAAeD,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cf,iBAA7C,CAAf","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { View, Text, ScrollView } from 'react-native';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData } from '../actions/index'\r\n\r\nclass ShowListComponent extends Component {\r\n    /*componentWillMount() {\r\n        this.props.fetchData()\r\n    }*/\r\n    updateStore=()=>{\r\n        this.props.fetchData();\r\n    }\r\n\r\n    getTvShows() {\r\n        const { dataTvMaze } = this.props;\r\n        if (dataTvMaze) {\r\n            return dataTvMaze.data.map((tv, index) => {\r\n                    return (\r\n                        <View key={index}>\r\n                            <Text>{tv.show.name}</Text>\r\n                        </View>\r\n                    );\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View>\r\n                <button onClick={this.updateStore}>traer</button>\r\n                <ScrollView>\r\n                    {this.props.dataTvMaze.isFeching && <Text>Loading</Text>}\r\n                    {this.props.dataTvMaze.data.length? this.getTvShows(): null}\r\n                </ScrollView>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dataTvMaze: state.data\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchData: () => {\r\n            return dispatch(fetchData())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowListComponent);"]},"metadata":{},"sourceType":"module"}